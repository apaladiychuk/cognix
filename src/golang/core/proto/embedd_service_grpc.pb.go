// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: embedd_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmbeddServiceClient is the client API for EmbeddService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmbeddServiceClient interface {
	GetEmbedd(ctx context.Context, in *EmbeddRequest, opts ...grpc.CallOption) (*EmbeddResponse, error)
}

type embeddServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbeddServiceClient(cc grpc.ClientConnInterface) EmbeddServiceClient {
	return &embeddServiceClient{cc}
}

func (c *embeddServiceClient) GetEmbedd(ctx context.Context, in *EmbeddRequest, opts ...grpc.CallOption) (*EmbeddResponse, error) {
	out := new(EmbeddResponse)
	err := c.cc.Invoke(ctx, "/com.embedd.EmbeddService/GetEmbedd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmbeddServiceServer is the server API for EmbeddService service.
// All implementations must embed UnimplementedEmbeddServiceServer
// for forward compatibility
type EmbeddServiceServer interface {
	GetEmbedd(context.Context, *EmbeddRequest) (*EmbeddResponse, error)
	mustEmbedUnimplementedEmbeddServiceServer()
}

// UnimplementedEmbeddServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmbeddServiceServer struct {
}

func (UnimplementedEmbeddServiceServer) GetEmbedd(context.Context, *EmbeddRequest) (*EmbeddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmbedd not implemented")
}
func (UnimplementedEmbeddServiceServer) mustEmbedUnimplementedEmbeddServiceServer() {}

// UnsafeEmbeddServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbeddServiceServer will
// result in compilation errors.
type UnsafeEmbeddServiceServer interface {
	mustEmbedUnimplementedEmbeddServiceServer()
}

func RegisterEmbeddServiceServer(s grpc.ServiceRegistrar, srv EmbeddServiceServer) {
	s.RegisterService(&EmbeddService_ServiceDesc, srv)
}

func _EmbeddService_GetEmbedd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbeddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddServiceServer).GetEmbedd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.embedd.EmbeddService/GetEmbedd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddServiceServer).GetEmbedd(ctx, req.(*EmbeddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmbeddService_ServiceDesc is the grpc.ServiceDesc for EmbeddService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmbeddService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.embedd.EmbeddService",
	HandlerType: (*EmbeddServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmbedd",
			Handler:    _EmbeddService_GetEmbedd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "embedd_service.proto",
}
