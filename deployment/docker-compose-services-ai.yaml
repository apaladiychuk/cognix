# docker network create cognix-network
#if network does not exists
version: '3.8'
networks:
  cognix-network:
    external: true
    name: cognix-network


services:
  embedder:
    container_name: embedder
    image: cognix/embedder:latest
    build:
      context: ../src/backend/chunker
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    volumes:
      - ${DATA_PATH}/models:/models
    env_file:
      - ${CONFIG_PATH}/embedder.env
    restart: always
    networks:
      - cognix-network
  
  chunker:
    container_name: chunker
    image: cognix/chunker:latest
    build:
      context: ../src/backend/chunker
      dockerfile: Dockerfile
    # ports:
    #   - "50051:50051"
    # volumes:
    #   - ${DATA_PATH}/models:/models
    env_file:
      - ${CONFIG_PATH}/chunker.env
    restart: always
    networks:
      - cognix-network

  # api:
  #   container_name: api
  #   image: cognix:api
  #   build:
  #     context: ${BACKEND_PATH}
  #     args:
  #       service: api
  #     dockerfile: Dockerfile
  #   environment:
  #     PORT: 8080
  #     STORAGE_PATH: /storage_volume/data
  #     UI_URL: http://localhost:8080/
  #     MILVUS_URL: host.docker.internal:19530
  #   ports:
  #     - "8080:8080"
  #   env_file:
  #     - ${CONFIG_PATH}/cockroach.env
  #     - ${CONFIG_PATH}/minio.env
  #     - ${CONFIG_PATH}/nats.env
  #     - ${CONFIG_PATH}/embedder.env
  #     - ${CONFIG_PATH}/.env
  #   volumes:
  #     - ${BACKEND_PATH}:/backend
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   networks:
  #     - cognix-network

  # orchestrator:
  #   container_name: orchestrator
  #   image: cognix:orchestrator
  #   build:
  #     context: ${BACKEND_PATH}
  #     args:
  #       service: orchestrator
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ${CONFIG_PATH}/cockroach.env
  #     - ${CONFIG_PATH}/nats.env
  #     - ${CONFIG_PATH}/pulsar.env
  #     - ${CONFIG_PATH}/.env
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   volumes:
  #     - ${BACKEND_PATH}:/backend
  #   networks:
  #     - cognix-network

  # connector:
  #   container_name: connector
  #   image: cognix:connector
  #   build:
  #     context: ${BACKEND_PATH}
  #     args:
  #       service: connector
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ${CONFIG_PATH}/cockroach.env
  #     - ${CONFIG_PATH}/nats.env
  #     - ${CONFIG_PATH}/.env
  #   environment:
  #     MILVUS_URL: host.docker.internal:19530
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   volumes:
  #     - ${BACKEND_PATH}:/backend
  #   networks:
  #     - cognix-network

  # migration:
  #   container_name: connector
  #   image: cognix:migration
  #   build:
  #     context: ${MIGRATION_PATH}
  #     dockerfile: Dockerfile

  #   volumes:
  #     - ${MIGRATION_PATH}/versions:/versions
  #   env_file:
  #     - ${CONFIG_PATH}/cockroach.env
  #   networks:
  #     - cognix-network

  # *****************************
  #         MinIO   
  # *****************************
  minio:
    container_name: minio
    image: minio/minio:RELEASE.2020-12-03T00-03-10Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - "../data/minio:/minio_data"
    command: minio server /minio_data
    ports:
     - "9000:9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - cognix-network
  # *****************************
  
  # *****************************
  #         Milvus   
  # *****************************
  etcd:
    container_name: etcd
    image: quay.io/coreos/etcd:v3.5.0
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
    volumes:
      - "../data/etcd:/etcd"
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - cognix-network

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.0.2
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - "../data/milvus:/var/lib/milvus"
    ports:
      - "19530:19530"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - cognix-network
  
  milvus-admin:
    image: milvusdb/milvus-insight:latest
    environment:
      HOST_URL: http://localhost:8000
      MILVUS_URL: host.docker.internal:19530
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "8000:3000"
    networks:
      - cognix-network
  # *****************************

  # *****************************
  # cockroach
  # *****************************
  cockroach:
    image: cockroachdb/cockroach:latest-v23.2
    ports:
      - "26257:26257"
      - "28080:8080"
    command: start-single-node --insecure
    volumes:
      - "../data/cockroach:/cockroach/cockroach-data"
    networks:
      - cognix-network
    # *****************************
  
  # *****************************
  # NATS
  # *****************************
  nats:
    image: nats:latest  # Use the latest NATS image
    container_name: nats
    ports:
      - "4222:4222"  # Client connections to NATS
      - "8222:8222"  # HTTP monitoring port for NATS
      - "6222:6222"  # Cluster port for NATS
    volumes:
      - nats-storage:/data/nats
    command:
      - "--name=nats"
      - "--http_port=8222"
      - "--js"
      - "--sd=/data/nats"
    networks:
      - cognix-network
  # not working atm but let's see if it works in some time
  # https://github.com/piotrpersona/nats-streaming-ui
  # nats-streaming-ui:
  #   build: .
  #   image: piotrpersona/nats-ui:latest
  #   ports:
  #     - "8282:8282"
  #   networks:
  #     - cognix-network

volumes:
  nats-storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../data/nats
# *****************************
